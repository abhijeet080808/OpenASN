///////////////////////////////////////////////////////////////////////////////

#include <memory>

std::shared_ptr<IProduction> mTypeAssigment;
std::vector<std::shared_ptr<IProduction>> mNamedBit;

///////////////////////////////////////////////////////////////////////////////

  LOG_START("TypeAssignment", asnData);
  auto type_assignment =
    ProductionFactory::Get(Production::TYPE_ASSIGNMENT);
  if (type_assignment->Parse(asnData, endStop))
  {
    mTypeAssignment = type_assignment;
    LOG_PASS("TypeAssignment", asnData);
    return true;
  }
  else
  {
    LOG_FAIL("AssignmentList", asnData);
  }

///////////////////////////////////////////////////////////////////////////////

  while (1)
  {
    LOG_START("Assignment", asnData);
    auto assignment =
      ProductionFactory::Get(Production::ASSIGNMENT);
    if (assignment->Parse(asnData, endStop))
    {
      mAssignment.push_back(assignment);
      LOG_PASS("Assignment", asnData);
    }
    else
    {
      LOG_FAIL("Assignment", asnData);
      return false;
    }

    LOG_START(",", asnData);
    auto asn_word = asnData.Peek();
    if (asn_word && std::get<1>(asn_word.value()) == ",")
    {
      asnData.IncrementCurrentIndex();
      LOG_PASS(",", asnData);
    }
    else
    {
      LOG_FAIL(",", asnData);
      break;
    }
  }

  return !mComponentType.empty();

///////////////////////////////////////////////////////////////////////////////

  LOG_START("BOOLEAN", asnData);
  auto asn_word = asnData.Peek();
  if (asn_word && std::get<1>(asn_word.value()) == "BOOLEAN")
  {
    asnData.IncrementCurrentIndex();
    LOG_PASS("BOOLEAN", asnData);
    return true;
  }
  else
  {
    LOG_FAIL("BOOLEAN", asnData);
    return false;
  }

///////////////////////////////////////////////////////////////////////////////

  std::vector<std::string> end_stop{ "}" };
  end_stop.insert(std::end(end_stop), std::begin(endStop), std::end(endStop));

///////////////////////////////////////////////////////////////////////////////

