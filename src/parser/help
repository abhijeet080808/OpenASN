///////////////////////////////////////////////////////////////////////////////

https://www.oss.com/asn1/resources/asn1-made-simple/types.html
https://asn1.io/asn1playground/

///////////////////////////////////////////////////////////////////////////////

EnumerationItem.cpp
NamedNumber.cpp
EncodingReference.cpp

///////////////////////////////////////////////////////////////////////////////

#include <memory>

std::shared_ptr<IProduction> mTypeAssigment;
std::vector<std::shared_ptr<IProduction>> mNamedBit;

///////////////////////////////////////////////////////////////////////////////

  endStop.push_back("}");

  auto obj = "TypeAssignment";
  LOG_START();
  auto type_assignment =
    ProductionFactory::Get(Production::TYPE_ASSIGNMENT);
  if (type_assignment->Parse(asnData, asnDataIndex, endStop))
  {
    mTypeAssignment = type_assignment;
    LOG_PASS();
    endStop.pop_back();
    return true;
  }
  else
  {
    LOG_FAIL();
    endStop.pop_back();
    asnDataIndex = starting_index;
    return false;
  }

////////////////////////////////////////////////////////////////////////////////

#include "ParseHelper.hh"

  size_t starting_index = asnDataIndex;

  auto obj = "T61String";
  LOG_START();
  if (ParseHelper::IsObjectPresent(obj, asnData, asnDataIndex))
  {
    LOG_PASS();
    ++asnDataIndex;
    return true;
  }
  else
  {
    LOG_FAIL();
    asnDataIndex = starting_index;
    return false;
  }

//////////////////////////////////////////////////////////////////////////////

  size_t starting_index = asnDataIndex;

  while (1)
  {
    auto obj = "NamedNumber";
    LOG_START();
    auto named_number =
      ProductionFactory::Get(Production::NAMED_NUMBER);
    if (named_number->Parse(asnData, asnDataIndex, endStop))
    {
      mNamedNumber.push_back(named_number);
      LOG_PASS();
    }
    else
    {
      LOG_FAIL();
      asnDataIndex = starting_index;
      return false;
    }

    obj = ",";
    LOG_START();
    if (ParseHelper::IsObjectPresent(obj, asnData, asnDataIndex))
    {
      LOG_PASS();
      ++asnDataIndex;
    }
    else
    {
      LOG_FAIL();
      break;
    }
  }

  if (mNamedNumber.empty())
  {
    asnDataIndex = starting_index;
    return false;
  }
  else
  {
    return true;
  }

///////////////////////////////////////////////////////////////////////////////

  std::vector<std::string> end_stop{ "}" };
  end_stop.insert(std::end(end_stop), std::begin(endStop), std::end(endStop));

///////////////////////////////////////////////////////////////////////////////

